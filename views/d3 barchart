var margin = {top: 40, right: 20, bottom: 120, left: 40},
                                width = 400 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;
                            
                            var formatPercent = d3.format(".%");

                            var x = d3.scale.ordinal()
                                .rangeRoundBands([0, width], .1, .3);
                            
                            var y = d3.scale.linear()
                                .range([height, 0]);
                            
                            var xAxis = d3.svg.axis()
                                .scale(x)
                                .orient("bottom");
                            
                            var yAxis = d3.svg.axis()
                                .scale(y)
                                .orient("left")
                                .tickFormat(formatPercent);
                            
                            var tip = d3.tip()
                            .attr('class', 'scrap-d3-tip')
                            .offset([-10, 0])
                            .html(function(d) {
                                
                                return "<strong>Tool:</strong> <span style='color:red'>" + d.scrap_code + "</span><br/><strong>Scrap Qty: </strong> <span style='color:red'>" + d.scrap_qty + " %</span>";
                            })
                            
                            var svg = d3.select(".scrap").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                            
                            svg.call(tip);
                            
                            //d3.tsv("data.tsv", type, function(error, data) {
                            var data = d3.tsv.parse(try_obj);
                            
                            x.domain(data.map(function(d) { return d.scrap_code; }));
                            //x.domain();
                            y.domain([0, d3.max(data, function(d) { return d.scrap_qty; })]);

                            
                            svg.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + height + ")")
                                .call(xAxis)
                                .selectAll("text")	
                                    .style("text-anchor", "end")
                                    .attr("dx", "-.8em")
                                    .attr("dy", ".15em")
                                    .attr("transform", function(d) {
                                        return "rotate(-90)" 
                                        });
                            
                            svg.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 6)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")
                                .text(" % Yield Loss");
                            
                            svg.selectAll(".bar")
                                .data(data)
                                .enter().append("rect")
                                .attr("class", "bar")
                                .attr("x", function(d) { return x(d.scrap_code); })
                                .attr("width", x.rangeBand())
                                .attr("y", function(d) { return y(d.scrap_qty); })
                                .attr("height", function(d) { return height - y(d.scrap_qty); })
                                .on('mouseover', tip.show)
                                .on('mouseout', tip.hide)
                            

                            //});

                                function wrap(text, width) {
                                    text.each(function() {
                                    var text = d3.select(this),
                                        words = text.text().split(/\s+/).reverse(),
                                        word,
                                        line = [],
                                        lineNumber = 0,
                                        lineHeight = 1.1, // ems
                                        y = text.attr("y"),
                                        dy = parseFloat(text.attr("dy")),
                                        tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
                                        while (word = words.pop()) {
                                            line.push(word);
                                            tspan.text(line.join(" "));
                                            if (tspan.node().getComputedTextLength() > width) {
                                                line.pop();
                                                tspan.text(line.join(" "));
                                                line = [word];
                                                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                                            }
                                        }
                                    });
                                }
                                                
                            function type(d) {
                            d.scrap_qty = +d.scrap_qty;
                            return d;
                            }