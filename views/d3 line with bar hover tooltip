var margin = {top: 40, right: 20, bottom: 120, left: 40},
                    width = 400 - margin.left - margin.right,
                    height = 300 - margin.top - margin.bottom;
                
                var formatPercent = d3.format(".%");

                var x = d3.scale.ordinal()
                    .rangeRoundBands([0, width], .1, .3);
                
                var y = d3.scale.linear()
                    .range([height, 0]);
                
                var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");
                
                var yAxis = d3.svg.axis()
                    .scale(y)
                    .orient("left")
                    .tickFormat(formatPercent);
                
                var tip = d3.tip()
                  .attr('class', 'd3-tip')
                  .offset([-10, 0])
                  .html(function(d) {
                    
                    return "<strong>Tool:</strong> <span style='color:red'>" + d.name + "</span><br/><strong>Yield Loss:</strong> <span style='color:red'>" + d.size + " %</span>";
                  })
                
                var svg = d3.select(".svgYield").append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                
                svg.call(tip);
                
                //d3.tsv("data.tsv", type, function(error, data) {
                var barG = d3.tsv.parse(try_obj);
                var lineG = d3.tsv.parse(line_obj);
                
                var data = [].concat.apply([], [barG, lineG]);

                  x.domain(data.map(function(d) { return d.name; }));
                  //x.domain();
                  y.domain([0, d3.max(data, function(d) { return d.size; })]);

                  var line = d3.svg.line()
                    .x(function(d) { return x(d.name)+x.rangeBand()/2; })
                    .y(function(d) { return y(d.size); });

                  svg.append("g")
                      .attr("class", "x axis")
                      .attr("transform", "translate(0," + height + ")")
                      .call(xAxis)
                      .selectAll("text")	
                        .style("text-anchor", "end")
                        .attr("dx", "-.8em")
                        .attr("dy", ".15em")
                        .attr("transform", function(d) {
                            return "rotate(-55)" 
                            });
                
                  svg.append("g")
                      .attr("class", "y axis")
                      .call(yAxis)
                    .append("text")
                      .attr("transform", "rotate(-90)")
                      .attr("y", 6)
                      .attr("dy", ".71em")
                      .style("text-anchor", "end")
                      .text(" % Yield Loss");
                
                  svg.selectAll(".bar")
                      .data(barG)
                    .enter().append("rect")
                      .attr("class", "bar")
                      .attr("x", function(d) { return x(d.name); })
                      .attr("width", x.rangeBand())
                      .attr("y", function(d) { return y(d.size); })
                      .attr("height", function(d) { return height - y(d.size); })
                      .on('mouseover', tip.show)
                      .on('mouseout', tip.hide)
                

                    svg.append("path")
                        .datum(lineG)
                        .attr("class", "lineStyle")
                        .attr("d", line);
                //});

                    function wrap(text, width) {
                        text.each(function() {
                        var text = d3.select(this),
                            words = text.text().split(/\s+/).reverse(),
                            word,
                            line = [],
                            lineNumber = 0,
                            lineHeight = 1.1, // ems
                            y = text.attr("y"),
                            dy = parseFloat(text.attr("dy")),
                            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
                            while (word = words.pop()) {
                                line.push(word);
                                tspan.text(line.join(" "));
                                if (tspan.node().getComputedTextLength() > width) {
                                    line.pop();
                                    tspan.text(line.join(" "));
                                    line = [word];
                                    tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                                }
                            }
                        });
                    }
                                    
                function type(d) {
                  d.size = +d.size;
                  return d;
                }